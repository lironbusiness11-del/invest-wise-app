import React, { useState, useEffect } from "react";
import { useSearchParams, useNavigate } from "react-router-dom";
import { Lesson, UserProgress, User } from "@/entities/all";
import { createPageUrl } from "@/utils";
import { motion } from "framer-motion";
import { ArrowLeft, BookOpen, CheckCircle2, Award, ArrowRight } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

export default function LessonPage() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const lessonSlug = searchParams.get("slug");

  const [lesson, setLesson] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      try {
        if (!lessonSlug) {
          setIsLoading(false);
          return;
        }
        
        const [lessonData] = await Promise.all([
            Lesson.filter({ slug: lessonSlug }),
        ]);
        
        if (lessonData.length > 0) {
          setLesson(lessonData[0]);
        } else {
          console.error("Lesson not found:", lessonSlug);
        }

      } catch (error) {
        console.error("Error loading lesson:", error);
      } finally {
        setIsLoading(false);
      }
    };
    loadData();
  }, [lessonSlug]);
  
  const handleStartQuiz = () => {
    navigate(createPageUrl(`Quiz?type=lesson&lesson_slug=${lesson.slug}`));
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!lesson) {
    return (
      <div className="text-center p-8">
        <h2 className="text-xl font-bold">השיעור לא נמצא</h2>
        <Button onClick={() => navigate(createPageUrl("Dashboard"))} className="mt-4">
          חזרה למסך הראשי
        </Button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50/50 via-white to-indigo-50/50" dir="rtl">
      <div className="sticky top-0 z-10 bg-white/90 backdrop-blur-sm border-b border-gray-100">
        <div className="max-w-4xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="icon" onClick={() => navigate(createPageUrl("Dashboard"))} className="hover:bg-gray-100">
                <ArrowRight className="w-5 h-5" />
              </Button>
              <div>
                <h1 className="font-bold text-gray-900">{lesson.title}</h1>
                <p className="text-sm text-gray-600">שיעור {lesson.lesson_number} • {lesson.estimated_minutes} דקות קריאה</p>
              </div>
            </div>
            <Badge className={`text-xs capitalize ${lesson.difficulty === "easy" ? "bg-green-100 text-green-700" : lesson.difficulty === "medium" ? "bg-yellow-100 text-yellow-700" : "bg-red-100 text-red-700"}`}>
              {lesson.difficulty === 'easy' ? 'קל' : lesson.difficulty === 'medium' ? 'בינוני' : 'קשה'}
            </Badge>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-6 py-8">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="space-y-8">
          <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-blue-700"><BookOpen className="w-5 h-5 ml-2" />מטרות השיעור</CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {lesson.learning_objectives.map((objective, index) => (
                  <li key={index} className="flex items-start gap-2 text-blue-700">
                    <CheckCircle2 className="w-4 h-4 mt-1 text-blue-500 flex-shrink-0" />
                    <span>{objective}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-2xl">{lesson.title}</CardTitle>
            </CardHeader>
            <CardContent className="prose prose-lg prose-slate max-w-none text-gray-800 leading-relaxed">
              <p>{lesson.mini_lecture}</p>
            </CardContent>
          </Card>

          
            <Card className="bg-gradient-to-r from-emerald-50 to-green-50 border-emerald-200">
              <CardContent className="p-8 text-center">
                <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Award className="w-8 h-8 text-emerald-600" />
                </div>
                <h3 className="text-xl font-semibold text-emerald-700 mb-2">מוכנים לבדוק את הידע שלכם?</h3>
                <p className="text-emerald-600 mb-6">ענו על חידון קצר כדי להשלים את השיעור ולהרוויח {lesson.xp_reward} נקודות!</p>
                <Button onClick={handleStartQuiz} className="bg-emerald-500 hover:bg-emerald-600 text-white px-8 py-3">
                  התחילו את החידון
                  <ArrowLeft className="w-4 h-4 mr-2" />
                </Button>
              </CardContent>
            </Card>
          
        </motion.div>
      </div>
    </div>
  );
}