import React, { useState, useEffect } from "react";
import { Lesson, UserProgress, UserStats, User } from "@/entities/all";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { motion } from "framer-motion";
import { Play, Lock, CheckCircle, Star, TrendingUp, Award, Clock } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";

export default function Dashboard() {
  const [lessons, setLessons] = useState([]);
  const [userProgress, setUserProgress] = useState([]);
  const [userStats, setUserStats] = useState(null);
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      const allLessons = await Lesson.list("lesson_number");
      setLessons(allLessons);
      
      const progress = await UserProgress.filter({ user_email: currentUser.email });
      setUserProgress(progress);
      
      let stats = await UserStats.filter({ user_email: currentUser.email });
      if (stats.length === 0) {
        stats = await UserStats.create({ 
          user_email: currentUser.email,
          total_xp: 0,
          current_streak: 0,
          lessons_completed: 0,
          hearts: 3,
          level: 1,
          badges: []
        });
        setUserStats(stats);
      } else {
        setUserStats(stats[0]);
      }
    } catch (error) {
      console.error("Error loading data:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const getLessonStatus = (lesson) => {
    const progress = userProgress.find(p => p.lesson_id === lesson.id);
    if (progress?.completed) return "completed";
    
    if (lesson.lesson_number === 1) return "available";
    if (lesson.unlock_after) {
      const prerequisite = userProgress.find(p => 
        lessons.find(l => l.id === p.lesson_id)?.lesson_number === lesson.unlock_after
      );
      return prerequisite?.completed ? "available" : "locked";
    }
    
    const previousLesson = lessons.find(l => l.lesson_number === lesson.lesson_number - 1);
    const prevProgress = userProgress.find(p => p.lesson_id === previousLesson?.id);
    return prevProgress?.completed ? "available" : "locked";
  };

  const getProgressPercentage = () => {
    const completed = userProgress.filter(p => p.completed).length;
    return Math.round((completed / lessons.length) * 100);
  };

  const renderLessonCard = (lesson, index) => {
    const status = getLessonStatus(lesson);
    const progress = userProgress.find(p => p.lesson_id === lesson.id);
    
    const cardVariants = {
      hidden: { opacity: 0, y: 20 },
      visible: { opacity: 1, y: 0, transition: { delay: index * 0.1 } }
    };

    return (
      <motion.div
        key={lesson.id}
        variants={cardVariants}
        initial="hidden"
        animate="visible"
      >
        <Card className={`group relative overflow-hidden transition-all duration-300 hover:shadow-lg ${
          status === "completed" 
            ? "bg-gradient-to-br from-emerald-50 to-green-50 border-emerald-200" 
            : status === "available"
            ? "bg-white hover:bg-gradient-to-br hover:from-blue-50 hover:to-indigo-50 border-gray-200 hover:border-blue-200"
            : "bg-gray-50 border-gray-100"
        }`}>
          <CardHeader className="pb-3">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <Badge variant="outline" className="text-xs font-medium">
                    Lesson {lesson.lesson_number}
                  </Badge>
                  <Badge className={`text-xs ${
                    lesson.difficulty === "easy" ? "bg-green-100 text-green-700" :
                    lesson.difficulty === "medium" ? "bg-yellow-100 text-yellow-700" :
                    "bg-red-100 text-red-700"
                  }`}>
                    {lesson.difficulty}
                  </Badge>
                </div>
                <CardTitle className="text-lg font-bold text-gray-900 leading-tight">
                  {lesson.title}
                </CardTitle>
                <p className="text-sm text-gray-600 mt-1 line-clamp-2">
                  {lesson.mini_lecture}
                </p>
              </div>
              
              <div className="ml-4">
                {status === "completed" ? (
                  <div className="w-12 h-12 bg-emerald-500 rounded-full flex items-center justify-center">
                    <CheckCircle className="w-6 h-6 text-white" />
                  </div>
                ) : status === "available" ? (
                  <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                    <Play className="w-6 h-6 text-white ml-0.5" />
                  </div>
                ) : (
                  <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center">
                    <Lock className="w-6 h-6 text-gray-500" />
                  </div>
                )}
              </div>
            </div>
          </CardHeader>
          
          <CardContent className="pt-0">
            <div className="flex items-center justify-between text-sm text-gray-500">
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-1">
                  <Clock className="w-4 h-4" />
                  {lesson.estimated_minutes} min
                </div>
                <div className="flex items-center gap-1">
                  <Star className="w-4 h-4" />
                  {lesson.xp_reward} XP
                </div>
              </div>
              
              {status === "completed" && progress && (
                <div className="text-emerald-600 font-medium">
                  Score: {progress.score}/6
                </div>
              )}
            </div>
            
            <div className="mt-4">
              {status === "available" ? (
                <Link to={createPageUrl(`Lesson?slug=${lesson.slug}`)}>
                  <Button className="w-full bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 text-white font-medium">
                    Start Lesson
                  </Button>
                </Link>
              ) : status === "completed" ? (
                <Link to={createPageUrl(`Lesson?slug=${lesson.slug}`)}>
                  <Button variant="outline" className="w-full border-emerald-200 text-emerald-700 hover:bg-emerald-50">
                    Review Lesson
                  </Button>
                </Link>
              ) : (
                <Button disabled className="w-full">
                  <Lock className="w-4 h-4 mr-2" />
                  Locked
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </motion.div>
    );
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-7xl mx-auto">
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            Welcome back! ðŸ‘‹
          </h1>
          <p className="text-lg text-gray-600">
            Continue your finance learning journey
          </p>
        </motion.div>

        {/* Progress Overview */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8"
        >
          <Card className="bg-gradient-to-br from-purple-50 to-indigo-50 border-purple-200">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-purple-700 flex items-center gap-2">
                <TrendingUp className="w-4 h-4" />
                Overall Progress
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-end gap-2 mb-2">
                <span className="text-3xl font-bold text-purple-700">{getProgressPercentage()}%</span>
                <span className="text-sm text-purple-600">complete</span>
              </div>
              <Progress value={getProgressPercentage()} className="h-2" />
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-emerald-50 to-green-50 border-emerald-200">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-emerald-700 flex items-center gap-2">
                <CheckCircle className="w-4 h-4" />
                Lessons Completed
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-end gap-2">
                <span className="text-3xl font-bold text-emerald-700">
                  {userStats?.lessons_completed || 0}
                </span>
                <span className="text-sm text-emerald-600">of {lessons.length}</span>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-orange-50 to-red-50 border-orange-200">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-orange-700 flex items-center gap-2">
                <Award className="w-4 h-4" />
                Total XP
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-end gap-2">
                <span className="text-3xl font-bold text-orange-700">
                  {userStats?.total_xp || 0}
                </span>
                <span className="text-sm text-orange-600">points</span>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Lessons Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {lessons.map((lesson, index) => renderLessonCard(lesson, index))}
        </div>
      </div>
    </div>
  );
}
